{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Auto-GPT Welcome to Auto-GPT. Please follow the Installation guide to get started. It is recommended to use a virtual machine for tasks that require high security measures to prevent any potential harm to the main computer's system and data.","title":"Home"},{"location":"#auto-gpt","text":"Welcome to Auto-GPT. Please follow the Installation guide to get started. It is recommended to use a virtual machine for tasks that require high security measures to prevent any potential harm to the main computer's system and data.","title":"Auto-GPT"},{"location":"code-of-conduct/","text":"Code of Conduct for Auto-GPT 1. Purpose The purpose of this Code of Conduct is to provide guidelines for contributors to the auto-gpt project on GitHub. We aim to create a positive and inclusive environment where all participants can contribute and collaborate effectively. By participating in this project, you agree to abide by this Code of Conduct. 2. Scope This Code of Conduct applies to all contributors, maintainers, and users of the auto-gpt project. It extends to all project spaces, including but not limited to issues, pull requests, code reviews, comments, and other forms of communication within the project. 3. Our Standards We encourage the following behavior: Being respectful and considerate to others Actively seeking diverse perspectives Providing constructive feedback and assistance Demonstrating empathy and understanding We discourage the following behavior: Harassment or discrimination of any kind Disrespectful, offensive, or inappropriate language or content Personal attacks or insults Unwarranted criticism or negativity 4. Reporting and Enforcement If you witness or experience any violations of this Code of Conduct, please report them to the project maintainers by email or other appropriate means. The maintainers will investigate and take appropriate action, which may include warnings, temporary or permanent bans, or other measures as necessary. Maintainers are responsible for ensuring compliance with this Code of Conduct and may take action to address any violations. 5. Acknowledgements This Code of Conduct is adapted from the Contributor Covenant . 6. Contact If you have any questions or concerns, please contact the project maintainers.","title":"Code of Conduct"},{"location":"code-of-conduct/#code-of-conduct-for-auto-gpt","text":"","title":"Code of Conduct for Auto-GPT"},{"location":"code-of-conduct/#1-purpose","text":"The purpose of this Code of Conduct is to provide guidelines for contributors to the auto-gpt project on GitHub. We aim to create a positive and inclusive environment where all participants can contribute and collaborate effectively. By participating in this project, you agree to abide by this Code of Conduct.","title":"1. Purpose"},{"location":"code-of-conduct/#2-scope","text":"This Code of Conduct applies to all contributors, maintainers, and users of the auto-gpt project. It extends to all project spaces, including but not limited to issues, pull requests, code reviews, comments, and other forms of communication within the project.","title":"2. Scope"},{"location":"code-of-conduct/#3-our-standards","text":"We encourage the following behavior: Being respectful and considerate to others Actively seeking diverse perspectives Providing constructive feedback and assistance Demonstrating empathy and understanding We discourage the following behavior: Harassment or discrimination of any kind Disrespectful, offensive, or inappropriate language or content Personal attacks or insults Unwarranted criticism or negativity","title":"3. Our Standards"},{"location":"code-of-conduct/#4-reporting-and-enforcement","text":"If you witness or experience any violations of this Code of Conduct, please report them to the project maintainers by email or other appropriate means. The maintainers will investigate and take appropriate action, which may include warnings, temporary or permanent bans, or other measures as necessary. Maintainers are responsible for ensuring compliance with this Code of Conduct and may take action to address any violations.","title":"4. Reporting and Enforcement"},{"location":"code-of-conduct/#5-acknowledgements","text":"This Code of Conduct is adapted from the Contributor Covenant .","title":"5. Acknowledgements"},{"location":"code-of-conduct/#6-contact","text":"If you have any questions or concerns, please contact the project maintainers.","title":"6. Contact"},{"location":"contributing/","text":"Contributing to Auto-GPT First of all, thank you for considering contributing to our project! We appreciate your time and effort, and we value any contribution, whether it's reporting a bug, suggesting a new feature, or submitting a pull request. This document provides guidelines and best practices to help you contribute effectively. Code of Conduct By participating in this project, you agree to abide by our Code of Conduct . Please read it to understand the expectations we have for everyone who contributes to this project. \ud83d\udce2 A Quick Word Right now we will not be accepting any Contributions that add non-essential commands to Auto-GPT. However, you absolutely can still add these commands to Auto-GPT in the form of plugins. Please check out this template . Getting Started Fork the repository and clone your fork. Create a new branch for your changes (use a descriptive name, such as fix-bug-123 or add-new-feature ). Make your changes in the new branch. Test your changes thoroughly. Commit and push your changes to your fork. Create a pull request following the guidelines in the Submitting Pull Requests section. How to Contribute Reporting Bugs If you find a bug in the project, please create an issue on GitHub with the following information: A clear, descriptive title for the issue. A description of the problem, including steps to reproduce the issue. Any relevant logs, screenshots, or other supporting information. Suggesting Enhancements If you have an idea for a new feature or improvement, please create an issue on GitHub with the following information: A clear, descriptive title for the issue. A detailed description of the proposed enhancement, including any benefits and potential drawbacks. Any relevant examples, mockups, or supporting information. Submitting Pull Requests When submitting a pull request, please ensure that your changes meet the following criteria: Your pull request should be atomic and focus on a single change. Your pull request should include tests for your change. We automatically enforce this with CodeCov You should have thoroughly tested your changes with multiple different prompts. You should have considered potential risks and mitigations for your changes. You should have documented your changes clearly and comprehensively. You should not include any unrelated or \"extra\" small tweaks or changes. Style Guidelines Code Formatting We use the black and isort code formatters to maintain a consistent coding style across the project. Please ensure that your code is formatted properly before submitting a pull request. To format your code, run the following commands in the project's root directory: python -m black . python -m isort . Or if you have these tools installed globally: black . isort . Pre-Commit Hooks We use pre-commit hooks to ensure that code formatting and other checks are performed automatically before each commit. To set up pre-commit hooks for this project, follow these steps: Install the pre-commit package using pip: pip install pre-commit Run the following command in the project's root directory to install the pre-commit hooks: pre-commit install Now, the pre-commit hooks will run automatically before each commit, checking your code formatting and other requirements. If you encounter any issues or have questions, feel free to reach out to the maintainers or open a new issue on GitHub. We're here to help and appreciate your efforts to contribute to the project. Happy coding, and once again, thank you for your contributions! Maintainers will look at PR that have no merge conflicts when deciding what to add to the project. Make sure your PR shows up here: https://github.com/Significant-Gravitas/Auto-GPT/pulls?q=is%3Apr+is%3Aopen+-label%3Aconflicts Testing your changes If you add or change code, make sure the updated code is covered by tests. To increase coverage if necessary, write tests using pytest . For more info on running tests, please refer to \"Running tests\" . API-dependent tests To run tests that involve making calls to the OpenAI API, we use VCRpy. It caches known requests and matching responses in so-called cassettes , allowing us to run the tests in CI without needing actual API access. When changes cause a test prompt to be generated differently, it will likely miss the cache and make a request to the API, updating the cassette with the new request+response. Be sure to include the updated cassette in your PR! When you run Pytest locally: If no prompt change: you will not consume API tokens because there are no new OpenAI calls required. If the prompt changes in a way that the cassettes are not reusable: If no API key, the test fails. It requires a new cassette. So, add an API key to .env. If the API key is present, the tests will make a real call to OpenAI. If the test ends up being successful, your prompt changes didn't introduce regressions. This is good. Commit your cassettes to your PR. If the test is unsuccessful: Either: Your change made Auto-GPT less capable, in that case, you have to change your code. Or: The test might be poorly written. In that case, you can make suggestions to change the test. In our CI pipeline, Pytest will use the cassettes and not call paid API providers, so we need your help to record the replays that you break. Community Challenges Challenges are goals we need Auto-GPT to achieve. To pick the challenge you like, go to the tests/integration/challenges folder and select the areas you would like to work on. - a challenge is new if level_currently_beaten is None - a challenge is in progress if level_currently_beaten is greater or equal to 1 - a challenge is beaten if level_currently_beaten = max_level Here is an example of how to run the memory challenge A and attempt to beat level 3. pytest -s tests/integration/challenges/memory/test_memory_challenge_a.py --level=3 To beat a challenge, you're not allowed to change anything in the tests folder, you have to add code in the autogpt folder Challenges use cassettes. Cassettes allow us to replay your runs in our CI pipeline. Don't hesitate to delete the cassettes associated to the challenge you're working on if you need to. Otherwise it will keep replaying the last run. Once you've beaten a new level of a challenge, please create a pull request and we will analyze how you changed Auto-GPT to beat the challenge.","title":"Contribution guide"},{"location":"contributing/#contributing-to-auto-gpt","text":"First of all, thank you for considering contributing to our project! We appreciate your time and effort, and we value any contribution, whether it's reporting a bug, suggesting a new feature, or submitting a pull request. This document provides guidelines and best practices to help you contribute effectively.","title":"Contributing to Auto-GPT"},{"location":"contributing/#code-of-conduct","text":"By participating in this project, you agree to abide by our Code of Conduct . Please read it to understand the expectations we have for everyone who contributes to this project.","title":"Code of Conduct"},{"location":"contributing/#a-quick-word","text":"Right now we will not be accepting any Contributions that add non-essential commands to Auto-GPT. However, you absolutely can still add these commands to Auto-GPT in the form of plugins. Please check out this template .","title":"\ud83d\udce2 A Quick Word"},{"location":"contributing/#getting-started","text":"Fork the repository and clone your fork. Create a new branch for your changes (use a descriptive name, such as fix-bug-123 or add-new-feature ). Make your changes in the new branch. Test your changes thoroughly. Commit and push your changes to your fork. Create a pull request following the guidelines in the Submitting Pull Requests section.","title":"Getting Started"},{"location":"contributing/#how-to-contribute","text":"","title":"How to Contribute"},{"location":"contributing/#reporting-bugs","text":"If you find a bug in the project, please create an issue on GitHub with the following information: A clear, descriptive title for the issue. A description of the problem, including steps to reproduce the issue. Any relevant logs, screenshots, or other supporting information.","title":"Reporting Bugs"},{"location":"contributing/#suggesting-enhancements","text":"If you have an idea for a new feature or improvement, please create an issue on GitHub with the following information: A clear, descriptive title for the issue. A detailed description of the proposed enhancement, including any benefits and potential drawbacks. Any relevant examples, mockups, or supporting information.","title":"Suggesting Enhancements"},{"location":"contributing/#submitting-pull-requests","text":"When submitting a pull request, please ensure that your changes meet the following criteria: Your pull request should be atomic and focus on a single change. Your pull request should include tests for your change. We automatically enforce this with CodeCov You should have thoroughly tested your changes with multiple different prompts. You should have considered potential risks and mitigations for your changes. You should have documented your changes clearly and comprehensively. You should not include any unrelated or \"extra\" small tweaks or changes.","title":"Submitting Pull Requests"},{"location":"contributing/#style-guidelines","text":"","title":"Style Guidelines"},{"location":"contributing/#code-formatting","text":"We use the black and isort code formatters to maintain a consistent coding style across the project. Please ensure that your code is formatted properly before submitting a pull request. To format your code, run the following commands in the project's root directory: python -m black . python -m isort . Or if you have these tools installed globally: black . isort .","title":"Code Formatting"},{"location":"contributing/#pre-commit-hooks","text":"We use pre-commit hooks to ensure that code formatting and other checks are performed automatically before each commit. To set up pre-commit hooks for this project, follow these steps: Install the pre-commit package using pip: pip install pre-commit Run the following command in the project's root directory to install the pre-commit hooks: pre-commit install Now, the pre-commit hooks will run automatically before each commit, checking your code formatting and other requirements. If you encounter any issues or have questions, feel free to reach out to the maintainers or open a new issue on GitHub. We're here to help and appreciate your efforts to contribute to the project. Happy coding, and once again, thank you for your contributions! Maintainers will look at PR that have no merge conflicts when deciding what to add to the project. Make sure your PR shows up here: https://github.com/Significant-Gravitas/Auto-GPT/pulls?q=is%3Apr+is%3Aopen+-label%3Aconflicts","title":"Pre-Commit Hooks"},{"location":"contributing/#testing-your-changes","text":"If you add or change code, make sure the updated code is covered by tests. To increase coverage if necessary, write tests using pytest . For more info on running tests, please refer to \"Running tests\" .","title":"Testing your changes"},{"location":"contributing/#api-dependent-tests","text":"To run tests that involve making calls to the OpenAI API, we use VCRpy. It caches known requests and matching responses in so-called cassettes , allowing us to run the tests in CI without needing actual API access. When changes cause a test prompt to be generated differently, it will likely miss the cache and make a request to the API, updating the cassette with the new request+response. Be sure to include the updated cassette in your PR! When you run Pytest locally: If no prompt change: you will not consume API tokens because there are no new OpenAI calls required. If the prompt changes in a way that the cassettes are not reusable: If no API key, the test fails. It requires a new cassette. So, add an API key to .env. If the API key is present, the tests will make a real call to OpenAI. If the test ends up being successful, your prompt changes didn't introduce regressions. This is good. Commit your cassettes to your PR. If the test is unsuccessful: Either: Your change made Auto-GPT less capable, in that case, you have to change your code. Or: The test might be poorly written. In that case, you can make suggestions to change the test. In our CI pipeline, Pytest will use the cassettes and not call paid API providers, so we need your help to record the replays that you break.","title":"API-dependent tests"},{"location":"contributing/#community-challenges","text":"Challenges are goals we need Auto-GPT to achieve. To pick the challenge you like, go to the tests/integration/challenges folder and select the areas you would like to work on. - a challenge is new if level_currently_beaten is None - a challenge is in progress if level_currently_beaten is greater or equal to 1 - a challenge is beaten if level_currently_beaten = max_level Here is an example of how to run the memory challenge A and attempt to beat level 3. pytest -s tests/integration/challenges/memory/test_memory_challenge_a.py --level=3 To beat a challenge, you're not allowed to change anything in the tests folder, you have to add code in the autogpt folder Challenges use cassettes. Cassettes allow us to replay your runs in our CI pipeline. Don't hesitate to delete the cassettes associated to the challenge you're working on if you need to. Otherwise it will keep replaying the last run. Once you've beaten a new level of a challenge, please create a pull request and we will analyze how you changed Auto-GPT to beat the challenge.","title":"Community Challenges"},{"location":"plugins/","text":"Plugins \u26a0\ufe0f\ud83d\udc80 WARNING \ud83d\udc80\u26a0\ufe0f: Review the code of any plugin you use thoroughly, as plugins can execute any Python code, potentially leading to malicious activities, such as stealing your API keys. See our Plugins Repo for more info on how to install all the amazing plugins the community has built! Alternatively, developers can use the Auto-GPT Plugin Template as a starting point for creating your own plugins.","title":"Plugins"},{"location":"plugins/#plugins","text":"\u26a0\ufe0f\ud83d\udc80 WARNING \ud83d\udc80\u26a0\ufe0f: Review the code of any plugin you use thoroughly, as plugins can execute any Python code, potentially leading to malicious activities, such as stealing your API keys. See our Plugins Repo for more info on how to install all the amazing plugins the community has built! Alternatively, developers can use the Auto-GPT Plugin Template as a starting point for creating your own plugins.","title":"Plugins"},{"location":"setup/","text":"Setting up Auto-GPT \ud83d\udccb Requirements Choose an environment to run Auto-GPT in (pick one): Docker ( recommended ) Python 3.10 or later (instructions: for Windows ) VSCode + devcontainer \ud83d\udddd\ufe0f Getting an API key Get your OpenAI API key from: https://platform.openai.com/account/api-keys . Attention To use the OpenAI API with Auto-GPT, we strongly recommend setting up billing (AKA paid account). Free accounts are limited to 3 API calls per minute, which can cause the application to crash. You can set up a paid account at Manage account > Billing > Overview . Important It's highly recommended that you keep keep track of your API costs on the Usage page . You can also set limits on how much you spend on the Usage limits page . Setting up Auto-GPT Set up with Docker Make sure you have Docker installed, see requirements Pull the latest image from Docker Hub docker pull significantgravitas/auto-gpt Create a folder for Auto-GPT In the folder, create a file called docker-compose.yml with the following contents: version : \"3.9\" services : auto-gpt : image : significantgravitas/auto-gpt depends_on : - redis env_file : - .env environment : MEMORY_BACKEND : ${MEMORY_BACKEND:-redis} REDIS_HOST : ${REDIS_HOST:-redis} volumes : - ./:/app profiles : [ \"exclude-from-up\" ] redis : image : \"redis/redis-stack-server:latest\" Create the necessary configuration files. If needed, you can find templates in the repository . Continue to Run with Docker Docker only supports headless browsing Auto-GPT uses a browser in headless mode by default: HEADLESS_BROWSER=True . Please do not change this setting in combination with Docker, or Auto-GPT will crash. Set up with Git Important Make sure you have Git installed for your OS. Executing commands To execute the given commands, open a CMD, Bash, or Powershell window. On Windows: press Win + X and pick Terminal , or Win + R and enter cmd Clone the repository git clone -b stable https://github.com/Significant-Gravitas/Auto-GPT.git Navigate to the directory where you downloaded the repository cd Auto-GPT Set up without Git/Docker Warning We recommend to use Git or Docker, to make updating easier. Download Source code (zip) from the latest stable release Extract the zip-file into a folder Configuration Find the file named .env.template in the main Auto-GPT folder. This file may be hidden by default in some operating systems due to the dot prefix. To reveal hidden files, follow the instructions for your specific operating system: Windows , macOS . Create a copy of .env.template and call it .env ; if you're already in a command prompt/terminal window: cp .env.template .env . Open the .env file in a text editor. Find the line that says OPENAI_API_KEY= . After the = , enter your unique OpenAI API Key without any quotes or spaces . Enter any other API keys or tokens for services you would like to use. Note To activate and adjust a setting, remove the # prefix. Save and close the .env file. Using a GPT Azure-instance If you want to use GPT on an Azure instance, set USE_AZURE to True and make an Azure configuration file: Rename azure.yaml.template to azure.yaml and provide the relevant azure_api_base , azure_api_version and all the deployment IDs for the relevant models in the azure_model_map section: fast_llm_model_deployment_id : your gpt-3.5-turbo or gpt-4 deployment ID smart_llm_model_deployment_id : your gpt-4 deployment ID embedding_model_deployment_id : your text-embedding-ada-002 v2 deployment ID Example: # Please specify all of these values as double-quoted strings # Replace string in angled brackets (<>) to your own ID azure_model_map : fast_llm_model_deployment_id : \"<my-fast-llm-deployment-id>\" ... Details can be found in the openai-python docs , and in the Azure OpenAI docs for the embedding model. If you're on Windows you may need to install an MSVC library . Running Auto-GPT Run with Docker Easiest is to use docker-compose . Run the commands below in your Auto-GPT folder. Build the image. If you have pulled the image from Docker Hub, skip this step. docker-compose build auto-gpt Run Auto-GPT docker-compose run --rm auto-gpt By default, this will also start and attach a Redis memory backend. If you do not want this, comment or remove the depends: - redis and redis: sections from docker-compose.yml . For related settings, see Memory > Redis setup . You can pass extra arguments, e.g. running with --gpt3only and --continuous : docker-compose run --rm auto-gpt --gpt3only --continuous If you dare, you can also build and run it with \"vanilla\" docker commands: docker build -t auto-gpt . docker run -it --env-file = .env -v $PWD :/app auto-gpt docker run -it --env-file = .env -v $PWD :/app --rm auto-gpt --gpt3only --continuous Run with Dev Container Install the Remote - Containers extension in VS Code. Open command palette with F1 and type Dev Containers: Open Folder in Container . Run ./run.sh . Run without Docker Simply run the startup script in your terminal. This will install any necessary Python packages and launch Auto-GPT. On Linux/MacOS: ./run.sh On Windows: . \\r un.bat If this gives errors, make sure you have a compatible Python version installed. See also the requirements .","title":"Setup"},{"location":"setup/#setting-up-auto-gpt","text":"","title":"Setting up Auto-GPT"},{"location":"setup/#requirements","text":"Choose an environment to run Auto-GPT in (pick one): Docker ( recommended ) Python 3.10 or later (instructions: for Windows ) VSCode + devcontainer","title":"\ud83d\udccb Requirements"},{"location":"setup/#getting-an-api-key","text":"Get your OpenAI API key from: https://platform.openai.com/account/api-keys . Attention To use the OpenAI API with Auto-GPT, we strongly recommend setting up billing (AKA paid account). Free accounts are limited to 3 API calls per minute, which can cause the application to crash. You can set up a paid account at Manage account > Billing > Overview . Important It's highly recommended that you keep keep track of your API costs on the Usage page . You can also set limits on how much you spend on the Usage limits page .","title":"\ud83d\udddd\ufe0f Getting an API key"},{"location":"setup/#setting-up-auto-gpt_1","text":"","title":"Setting up Auto-GPT"},{"location":"setup/#set-up-with-docker","text":"Make sure you have Docker installed, see requirements Pull the latest image from Docker Hub docker pull significantgravitas/auto-gpt Create a folder for Auto-GPT In the folder, create a file called docker-compose.yml with the following contents: version : \"3.9\" services : auto-gpt : image : significantgravitas/auto-gpt depends_on : - redis env_file : - .env environment : MEMORY_BACKEND : ${MEMORY_BACKEND:-redis} REDIS_HOST : ${REDIS_HOST:-redis} volumes : - ./:/app profiles : [ \"exclude-from-up\" ] redis : image : \"redis/redis-stack-server:latest\" Create the necessary configuration files. If needed, you can find templates in the repository . Continue to Run with Docker Docker only supports headless browsing Auto-GPT uses a browser in headless mode by default: HEADLESS_BROWSER=True . Please do not change this setting in combination with Docker, or Auto-GPT will crash.","title":"Set up with Docker"},{"location":"setup/#set-up-with-git","text":"Important Make sure you have Git installed for your OS. Executing commands To execute the given commands, open a CMD, Bash, or Powershell window. On Windows: press Win + X and pick Terminal , or Win + R and enter cmd Clone the repository git clone -b stable https://github.com/Significant-Gravitas/Auto-GPT.git Navigate to the directory where you downloaded the repository cd Auto-GPT","title":"Set up with Git"},{"location":"setup/#set-up-without-gitdocker","text":"Warning We recommend to use Git or Docker, to make updating easier. Download Source code (zip) from the latest stable release Extract the zip-file into a folder","title":"Set up without Git/Docker"},{"location":"setup/#configuration","text":"Find the file named .env.template in the main Auto-GPT folder. This file may be hidden by default in some operating systems due to the dot prefix. To reveal hidden files, follow the instructions for your specific operating system: Windows , macOS . Create a copy of .env.template and call it .env ; if you're already in a command prompt/terminal window: cp .env.template .env . Open the .env file in a text editor. Find the line that says OPENAI_API_KEY= . After the = , enter your unique OpenAI API Key without any quotes or spaces . Enter any other API keys or tokens for services you would like to use. Note To activate and adjust a setting, remove the # prefix. Save and close the .env file. Using a GPT Azure-instance If you want to use GPT on an Azure instance, set USE_AZURE to True and make an Azure configuration file: Rename azure.yaml.template to azure.yaml and provide the relevant azure_api_base , azure_api_version and all the deployment IDs for the relevant models in the azure_model_map section: fast_llm_model_deployment_id : your gpt-3.5-turbo or gpt-4 deployment ID smart_llm_model_deployment_id : your gpt-4 deployment ID embedding_model_deployment_id : your text-embedding-ada-002 v2 deployment ID Example: # Please specify all of these values as double-quoted strings # Replace string in angled brackets (<>) to your own ID azure_model_map : fast_llm_model_deployment_id : \"<my-fast-llm-deployment-id>\" ... Details can be found in the openai-python docs , and in the Azure OpenAI docs for the embedding model. If you're on Windows you may need to install an MSVC library .","title":"Configuration"},{"location":"setup/#running-auto-gpt","text":"","title":"Running Auto-GPT"},{"location":"setup/#run-with-docker","text":"Easiest is to use docker-compose . Run the commands below in your Auto-GPT folder. Build the image. If you have pulled the image from Docker Hub, skip this step. docker-compose build auto-gpt Run Auto-GPT docker-compose run --rm auto-gpt By default, this will also start and attach a Redis memory backend. If you do not want this, comment or remove the depends: - redis and redis: sections from docker-compose.yml . For related settings, see Memory > Redis setup . You can pass extra arguments, e.g. running with --gpt3only and --continuous : docker-compose run --rm auto-gpt --gpt3only --continuous If you dare, you can also build and run it with \"vanilla\" docker commands: docker build -t auto-gpt . docker run -it --env-file = .env -v $PWD :/app auto-gpt docker run -it --env-file = .env -v $PWD :/app --rm auto-gpt --gpt3only --continuous","title":"Run with Docker"},{"location":"setup/#run-with-dev-container","text":"Install the Remote - Containers extension in VS Code. Open command palette with F1 and type Dev Containers: Open Folder in Container . Run ./run.sh .","title":"Run with Dev Container"},{"location":"setup/#run-without-docker","text":"Simply run the startup script in your terminal. This will install any necessary Python packages and launch Auto-GPT. On Linux/MacOS: ./run.sh On Windows: . \\r un.bat If this gives errors, make sure you have a compatible Python version installed. See also the requirements .","title":"Run without Docker"},{"location":"testing/","text":"Running tests To run all tests, use the following command: pytest If pytest is not found: python -m pytest Running specific test suites To run without integration tests: pytest --without-integration To run without slow integration tests: pytest --without-slow-integration To run tests and see coverage: pytest --cov = autogpt --without-integration --without-slow-integration Running the linter This project uses flake8 for linting. We currently use the following rules: E303,W293,W291,W292,E305,E231,E302 . See the flake8 rules for more information. To run the linter: flake8 . Or: python -m flake8 .","title":"Running tests"},{"location":"testing/#running-tests","text":"To run all tests, use the following command: pytest If pytest is not found: python -m pytest","title":"Running tests"},{"location":"testing/#running-specific-test-suites","text":"To run without integration tests: pytest --without-integration To run without slow integration tests: pytest --without-slow-integration To run tests and see coverage: pytest --cov = autogpt --without-integration --without-slow-integration","title":"Running specific test suites"},{"location":"testing/#running-the-linter","text":"This project uses flake8 for linting. We currently use the following rules: E303,W293,W291,W292,E305,E231,E302 . See the flake8 rules for more information. To run the linter: flake8 . Or: python -m flake8 .","title":"Running the linter"},{"location":"usage/","text":"Usage Command Line Arguments Running with --help lists all the possible command line arguments you can pass: ./run.sh --help # on Linux / macOS . \\r un.bat --help # on Windows Info For use with Docker, replace the script in the examples with docker-compose run --rm auto-gpt : docker-compose run --rm auto-gpt --help docker-compose run --rm auto-gpt --ai-settings <filename> Note Replace anything in angled brackets (<>) to a value you want to specify Here are some common arguments you can use when running Auto-GPT: Run Auto-GPT with a different AI Settings file ./run.sh --ai-settings <filename> Specify a memory backend ./run.sh --use-memory <memory-backend> Note There are shorthands for some of these flags, for example -m for --use-memory . Use ./run.sh --help for more information. Speak Mode Enter this command to use TTS (Text-to-Speech) for Auto-GPT ./run.sh --speak \ud83d\udc80 Continuous Mode \u26a0\ufe0f Run the AI without user authorization, 100% automated. Continuous mode is NOT recommended. It is potentially dangerous and may cause your AI to run forever or carry out actions you would not usually authorize. Use at your own risk. ./run.sh --continuous To exit the program, press Ctrl + C \u267b\ufe0f Self-Feedback Mode \u26a0\ufe0f Running Self-Feedback will INCREASE token use and thus cost more. This feature enables the agent to provide self-feedback by verifying its own actions and checking if they align with its current goals. If not, it will provide better feedback for the next loop. To enable this feature for the current loop, input S into the input field. GPT-3.5 ONLY Mode If you don't have access to GPT-4, this mode allows you to use Auto-GPT! ./run.sh --gpt3only You can achieve the same by setting SMART_LLM_MODEL in .env to gpt-3.5-turbo . GPT-4 ONLY Mode If you have access to GPT-4, this mode allows you to use Auto-GPT solely with GPT-4. This may give your bot increased intelligence. ./run.sh --gpt4only Warning Since GPT-4 is more expensive to use, running Auto-GPT in GPT-4-only mode will increase your API costs. Logs Activity and error logs are located in the ./output/logs To print out debug logs: ./run.sh --debug","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#command-line-arguments","text":"Running with --help lists all the possible command line arguments you can pass: ./run.sh --help # on Linux / macOS . \\r un.bat --help # on Windows Info For use with Docker, replace the script in the examples with docker-compose run --rm auto-gpt : docker-compose run --rm auto-gpt --help docker-compose run --rm auto-gpt --ai-settings <filename> Note Replace anything in angled brackets (<>) to a value you want to specify Here are some common arguments you can use when running Auto-GPT: Run Auto-GPT with a different AI Settings file ./run.sh --ai-settings <filename> Specify a memory backend ./run.sh --use-memory <memory-backend> Note There are shorthands for some of these flags, for example -m for --use-memory . Use ./run.sh --help for more information.","title":"Command Line Arguments"},{"location":"usage/#speak-mode","text":"Enter this command to use TTS (Text-to-Speech) for Auto-GPT ./run.sh --speak","title":"Speak Mode"},{"location":"usage/#continuous-mode","text":"Run the AI without user authorization, 100% automated. Continuous mode is NOT recommended. It is potentially dangerous and may cause your AI to run forever or carry out actions you would not usually authorize. Use at your own risk. ./run.sh --continuous To exit the program, press Ctrl + C","title":"\ud83d\udc80 Continuous Mode \u26a0\ufe0f"},{"location":"usage/#self-feedback-mode","text":"Running Self-Feedback will INCREASE token use and thus cost more. This feature enables the agent to provide self-feedback by verifying its own actions and checking if they align with its current goals. If not, it will provide better feedback for the next loop. To enable this feature for the current loop, input S into the input field.","title":"\u267b\ufe0f Self-Feedback Mode \u26a0\ufe0f"},{"location":"usage/#gpt-35-only-mode","text":"If you don't have access to GPT-4, this mode allows you to use Auto-GPT! ./run.sh --gpt3only You can achieve the same by setting SMART_LLM_MODEL in .env to gpt-3.5-turbo .","title":"GPT-3.5 ONLY Mode"},{"location":"usage/#gpt-4-only-mode","text":"If you have access to GPT-4, this mode allows you to use Auto-GPT solely with GPT-4. This may give your bot increased intelligence. ./run.sh --gpt4only Warning Since GPT-4 is more expensive to use, running Auto-GPT in GPT-4-only mode will increase your API costs.","title":"GPT-4 ONLY Mode"},{"location":"usage/#logs","text":"Activity and error logs are located in the ./output/logs To print out debug logs: ./run.sh --debug","title":"Logs"},{"location":"configuration/imagegen/","text":"\ud83d\uddbc Image Generation configuration Config variable Values IMAGE_PROVIDER dalle huggingface sdwebui default: dalle DALL-e In .env , make sure IMAGE_PROVIDER is commented (or set to dalle ): # IMAGE_PROVIDER=dalle # this is the default Further optional configuration: Config variable Values IMAGE_SIZE 256 512 1024 default: 256 Hugging Face To use text-to-image models from Hugging Face, you need a Hugging Face API token. Link to the appropriate settings page: Hugging Face > Settings > Tokens Once you have an API token, uncomment and adjust these variables in your .env : IMAGE_PROVIDER = huggingface HUGGINGFACE_API_TOKEN = your-huggingface-api-token Further optional configuration: Config variable Values HUGGINGFACE_IMAGE_MODEL see available models default: CompVis/stable-diffusion-v1-4 Stable Diffusion WebUI It is possible to use your own self-hosted Stable Diffusion WebUI with Auto-GPT: IMAGE_PROVIDER = sdwebui Note Make sure you are running WebUI with --api enabled. Further optional configuration: Config variable Values SD_WEBUI_URL URL to your WebUI default: http://127.0.0.1:7860 SD_WEBUI_AUTH {username}:{password} Note: do not copy the braces! Selenium sudo Xvfb :10 -ac -screen 0 1024x768x24 & DISPLAY = :10 <YOUR_CLIENT>","title":"Image Generation"},{"location":"configuration/imagegen/#image-generation-configuration","text":"Config variable Values IMAGE_PROVIDER dalle huggingface sdwebui default: dalle","title":"\ud83d\uddbc Image Generation configuration"},{"location":"configuration/imagegen/#dall-e","text":"In .env , make sure IMAGE_PROVIDER is commented (or set to dalle ): # IMAGE_PROVIDER=dalle # this is the default Further optional configuration: Config variable Values IMAGE_SIZE 256 512 1024 default: 256","title":"DALL-e"},{"location":"configuration/imagegen/#hugging-face","text":"To use text-to-image models from Hugging Face, you need a Hugging Face API token. Link to the appropriate settings page: Hugging Face > Settings > Tokens Once you have an API token, uncomment and adjust these variables in your .env : IMAGE_PROVIDER = huggingface HUGGINGFACE_API_TOKEN = your-huggingface-api-token Further optional configuration: Config variable Values HUGGINGFACE_IMAGE_MODEL see available models default: CompVis/stable-diffusion-v1-4","title":"Hugging Face"},{"location":"configuration/imagegen/#stable-diffusion-webui","text":"It is possible to use your own self-hosted Stable Diffusion WebUI with Auto-GPT: IMAGE_PROVIDER = sdwebui Note Make sure you are running WebUI with --api enabled. Further optional configuration: Config variable Values SD_WEBUI_URL URL to your WebUI default: http://127.0.0.1:7860 SD_WEBUI_AUTH {username}:{password} Note: do not copy the braces!","title":"Stable Diffusion WebUI"},{"location":"configuration/imagegen/#selenium","text":"sudo Xvfb :10 -ac -screen 0 1024x768x24 & DISPLAY = :10 <YOUR_CLIENT>","title":"Selenium"},{"location":"configuration/memory/","text":"Setting Your Cache Type By default, Auto-GPT set up with Docker Compose will use Redis as its memory backend. Otherwise, the default is LocalCache (which stores memory in a JSON file). To switch to a different backend, change the MEMORY_BACKEND in .env to the value that you want: local uses a local JSON cache file pinecone uses the Pinecone.io account you configured in your ENV settings redis will use the redis cache that you configured milvus will use the milvus cache that you configured weaviate will use the weaviate cache that you configured Memory Backend Setup Links to memory backends Pinecone Milvus \u2013 self-hosted , or managed with Zilliz Cloud Redis Weaviate Redis Setup Important If you have set up Auto-GPT using Docker Compose, then Redis is included, no further setup needed. Caution This setup is not intended to be publicly accessible and lacks security measures. Avoid exposing Redis to the internet without a password or at all! Launch Redis container docker run -d --name redis-stack-server -p 6379 :6379 redis/redis-stack-server:latest Set the following settings in .env MEMORY_BACKEND = redis REDIS_HOST = localhost REDIS_PORT = 6379 REDIS_PASSWORD = <PASSWORD> Replace <PASSWORD> by your password, omitting the angled brackets (<>). Optional configuration: WIPE_REDIS_ON_START=False to persist memory stored in Redis between runs. MEMORY_INDEX=<WHATEVER> to specify a name for the memory index in Redis. The default is auto-gpt . Info See redis-stack-server for setting a password and additional configuration. \ud83c\udf32 Pinecone API Key Setup Pinecone lets you store vast amounts of vector-based memory, allowing the agent to load only relevant memories at any given time. Go to pinecone and make an account if you don't already have one. Choose the Starter plan to avoid being charged. Find your API key and region under the default project in the left sidebar. In the .env file set: PINECONE_API_KEY PINECONE_ENV (example: us-east4-gcp ) MEMORY_BACKEND=pinecone Milvus Setup Milvus is an open-source, highly scalable vector database to store huge amounts of vector-based memory and provide fast relevant search. It can be quickly deployed with docker, or as a cloud service provided by Zilliz Cloud . Deploy your Milvus service, either locally using docker or with a managed Zilliz Cloud database: Install and deploy Milvus locally Set up a managed Zilliz Cloud database Go to Zilliz Cloud and sign up if you don't already have account. In the Databases tab, create a new database. Remember your username and password Wait until the database status is changed to RUNNING. In the Database detail tab of the database you have created, the public cloud endpoint, such as: https://xxx-xxxx.xxxx.xxxx.zillizcloud.com:443 . Run pip3 install pymilvus to install the required client library. Make sure your PyMilvus version and Milvus version are compatible to avoid issues. See also the PyMilvus installation instructions . Update .env : MEMORY_BACKEND=milvus One of: MILVUS_ADDR=host:ip (for local instance) MILVUS_ADDR=https://xxx-xxxx.xxxx.xxxx.zillizcloud.com:443 (for Zilliz Cloud) The following settings are optional : MILVUS_USERNAME='username-of-your-milvus-instance' MILVUS_PASSWORD='password-of-your-milvus-instance' MILVUS_SECURE=True to use a secure connection. Only use if your Milvus instance has TLS enabled. Note: setting MILVUS_ADDR to a https:// URL will override this setting. MILVUS_COLLECTION to change the collection name to use in Milvus. Defaults to autogpt . Weaviate Setup Weaviate is an open-source vector database. It allows to store data objects and vector embeddings from ML-models and scales seamlessly to billion of data objects. To set up a Weaviate database, check out their Quickstart Tutorial . Although still experimental, Embedded Weaviate is supported which allows the Auto-GPT process itself to start a Weaviate instance. To enable it, set USE_WEAVIATE_EMBEDDED to True and make sure you pip install \"weaviate-client>=3.15.4\" . Install the Weaviate client Install the Weaviate client before usage. $ pip install weaviate-client Setting up environment variables In your .env file set the following: MEMORY_BACKEND = weaviate WEAVIATE_HOST = \"127.0.0.1\" # the IP or domain of the running Weaviate instance WEAVIATE_PORT = \"8080\" WEAVIATE_PROTOCOL = \"http\" WEAVIATE_USERNAME = \"your username\" WEAVIATE_PASSWORD = \"your password\" WEAVIATE_API_KEY = \"your weaviate API key if you have one\" WEAVIATE_EMBEDDED_PATH = \"/home/me/.local/share/weaviate\" # this is optional and indicates where the data should be persisted when running an embedded instance USE_WEAVIATE_EMBEDDED = False # set to True to run Embedded Weaviate MEMORY_INDEX = \"Autogpt\" # name of the index to create for the application View Memory Usage View memory usage by using the --debug flag :) \ud83e\udde0 Memory pre-seeding Memory pre-seeding allows you to ingest files into memory and pre-seed it before running Auto-GPT. $ python data_ingestion.py -h usage: data_ingestion.py [ -h ] ( --file FILE | --dir DIR ) [ --init ] [ --overlap OVERLAP ] [ --max_length MAX_LENGTH ] Ingest a file or a directory with multiple files into memory. Make sure to set your .env before running this script. options: -h, --help show this help message and exit --file FILE The file to ingest. --dir DIR The directory containing the files to ingest. --init Init the memory and wipe its content ( default: False ) --overlap OVERLAP The overlap size between chunks when ingesting files ( default: 200 ) --max_length MAX_LENGTH The max_length of each chunk when ingesting files ( default: 4000 ) # python data_ingestion.py --dir DataFolder --init --overlap 100 --max_length 2000 In the example above, the script initializes the memory, ingests all files within the Auto-Gpt/autogpt/auto_gpt_workspace/DataFolder directory into memory with an overlap between chunks of 100 and a maximum length of each chunk of 2000. Note that you can also use the --file argument to ingest a single file into memory and that data_ingestion.py will only ingest files within the /auto_gpt_workspace directory. The DIR path is relative to the auto_gpt_workspace directory, so python data_ingestion.py --dir . --init will ingest everything in auto_gpt_workspace directory. You can adjust the max_length and overlap parameters to fine-tune the way the documents are presented to the AI when it \"recall\" that memory: Adjusting the overlap value allows the AI to access more contextual information from each chunk when recalling information, but will result in more chunks being created and therefore increase memory backend usage and OpenAI API requests. Reducing the max_length value will create more chunks, which can save prompt tokens by allowing for more message history in the context, but will also increase the number of chunks. Increasing the max_length value will provide the AI with more contextual information from each chunk, reducing the number of chunks created and saving on OpenAI API requests. However, this may also use more prompt tokens and decrease the overall context available to the AI. Memory pre-seeding is a technique for improving AI accuracy by ingesting relevant data into its memory. Chunks of data are split and added to memory, allowing the AI to access them quickly and generate more accurate responses. It's useful for large datasets or when specific information needs to be accessed quickly. Examples include ingesting API or GitHub documentation before running Auto-GPT. Attention If you use Redis for memory, make sure to run Auto-GPT with WIPE_REDIS_ON_START=False For other memory backends, we currently forcefully wipe the memory when starting Auto-GPT. To ingest data with those memory backends, you can call the data_ingestion.py script anytime during an Auto-GPT run. Memories will be available to the AI immediately as they are ingested, even if ingested while Auto-GPT is running.","title":"Memory"},{"location":"configuration/memory/#setting-your-cache-type","text":"By default, Auto-GPT set up with Docker Compose will use Redis as its memory backend. Otherwise, the default is LocalCache (which stores memory in a JSON file). To switch to a different backend, change the MEMORY_BACKEND in .env to the value that you want: local uses a local JSON cache file pinecone uses the Pinecone.io account you configured in your ENV settings redis will use the redis cache that you configured milvus will use the milvus cache that you configured weaviate will use the weaviate cache that you configured","title":"Setting Your Cache Type"},{"location":"configuration/memory/#memory-backend-setup","text":"Links to memory backends Pinecone Milvus \u2013 self-hosted , or managed with Zilliz Cloud Redis Weaviate","title":"Memory Backend Setup"},{"location":"configuration/memory/#redis-setup","text":"Important If you have set up Auto-GPT using Docker Compose, then Redis is included, no further setup needed. Caution This setup is not intended to be publicly accessible and lacks security measures. Avoid exposing Redis to the internet without a password or at all! Launch Redis container docker run -d --name redis-stack-server -p 6379 :6379 redis/redis-stack-server:latest Set the following settings in .env MEMORY_BACKEND = redis REDIS_HOST = localhost REDIS_PORT = 6379 REDIS_PASSWORD = <PASSWORD> Replace <PASSWORD> by your password, omitting the angled brackets (<>). Optional configuration: WIPE_REDIS_ON_START=False to persist memory stored in Redis between runs. MEMORY_INDEX=<WHATEVER> to specify a name for the memory index in Redis. The default is auto-gpt . Info See redis-stack-server for setting a password and additional configuration.","title":"Redis Setup"},{"location":"configuration/memory/#pinecone-api-key-setup","text":"Pinecone lets you store vast amounts of vector-based memory, allowing the agent to load only relevant memories at any given time. Go to pinecone and make an account if you don't already have one. Choose the Starter plan to avoid being charged. Find your API key and region under the default project in the left sidebar. In the .env file set: PINECONE_API_KEY PINECONE_ENV (example: us-east4-gcp ) MEMORY_BACKEND=pinecone","title":"\ud83c\udf32 Pinecone API Key Setup"},{"location":"configuration/memory/#milvus-setup","text":"Milvus is an open-source, highly scalable vector database to store huge amounts of vector-based memory and provide fast relevant search. It can be quickly deployed with docker, or as a cloud service provided by Zilliz Cloud . Deploy your Milvus service, either locally using docker or with a managed Zilliz Cloud database: Install and deploy Milvus locally Set up a managed Zilliz Cloud database Go to Zilliz Cloud and sign up if you don't already have account. In the Databases tab, create a new database. Remember your username and password Wait until the database status is changed to RUNNING. In the Database detail tab of the database you have created, the public cloud endpoint, such as: https://xxx-xxxx.xxxx.xxxx.zillizcloud.com:443 . Run pip3 install pymilvus to install the required client library. Make sure your PyMilvus version and Milvus version are compatible to avoid issues. See also the PyMilvus installation instructions . Update .env : MEMORY_BACKEND=milvus One of: MILVUS_ADDR=host:ip (for local instance) MILVUS_ADDR=https://xxx-xxxx.xxxx.xxxx.zillizcloud.com:443 (for Zilliz Cloud) The following settings are optional : MILVUS_USERNAME='username-of-your-milvus-instance' MILVUS_PASSWORD='password-of-your-milvus-instance' MILVUS_SECURE=True to use a secure connection. Only use if your Milvus instance has TLS enabled. Note: setting MILVUS_ADDR to a https:// URL will override this setting. MILVUS_COLLECTION to change the collection name to use in Milvus. Defaults to autogpt .","title":"Milvus Setup"},{"location":"configuration/memory/#weaviate-setup","text":"Weaviate is an open-source vector database. It allows to store data objects and vector embeddings from ML-models and scales seamlessly to billion of data objects. To set up a Weaviate database, check out their Quickstart Tutorial . Although still experimental, Embedded Weaviate is supported which allows the Auto-GPT process itself to start a Weaviate instance. To enable it, set USE_WEAVIATE_EMBEDDED to True and make sure you pip install \"weaviate-client>=3.15.4\" .","title":"Weaviate Setup"},{"location":"configuration/memory/#install-the-weaviate-client","text":"Install the Weaviate client before usage. $ pip install weaviate-client","title":"Install the Weaviate client"},{"location":"configuration/memory/#setting-up-environment-variables","text":"In your .env file set the following: MEMORY_BACKEND = weaviate WEAVIATE_HOST = \"127.0.0.1\" # the IP or domain of the running Weaviate instance WEAVIATE_PORT = \"8080\" WEAVIATE_PROTOCOL = \"http\" WEAVIATE_USERNAME = \"your username\" WEAVIATE_PASSWORD = \"your password\" WEAVIATE_API_KEY = \"your weaviate API key if you have one\" WEAVIATE_EMBEDDED_PATH = \"/home/me/.local/share/weaviate\" # this is optional and indicates where the data should be persisted when running an embedded instance USE_WEAVIATE_EMBEDDED = False # set to True to run Embedded Weaviate MEMORY_INDEX = \"Autogpt\" # name of the index to create for the application","title":"Setting up environment variables"},{"location":"configuration/memory/#view-memory-usage","text":"View memory usage by using the --debug flag :)","title":"View Memory Usage"},{"location":"configuration/memory/#memory-pre-seeding","text":"Memory pre-seeding allows you to ingest files into memory and pre-seed it before running Auto-GPT. $ python data_ingestion.py -h usage: data_ingestion.py [ -h ] ( --file FILE | --dir DIR ) [ --init ] [ --overlap OVERLAP ] [ --max_length MAX_LENGTH ] Ingest a file or a directory with multiple files into memory. Make sure to set your .env before running this script. options: -h, --help show this help message and exit --file FILE The file to ingest. --dir DIR The directory containing the files to ingest. --init Init the memory and wipe its content ( default: False ) --overlap OVERLAP The overlap size between chunks when ingesting files ( default: 200 ) --max_length MAX_LENGTH The max_length of each chunk when ingesting files ( default: 4000 ) # python data_ingestion.py --dir DataFolder --init --overlap 100 --max_length 2000 In the example above, the script initializes the memory, ingests all files within the Auto-Gpt/autogpt/auto_gpt_workspace/DataFolder directory into memory with an overlap between chunks of 100 and a maximum length of each chunk of 2000. Note that you can also use the --file argument to ingest a single file into memory and that data_ingestion.py will only ingest files within the /auto_gpt_workspace directory. The DIR path is relative to the auto_gpt_workspace directory, so python data_ingestion.py --dir . --init will ingest everything in auto_gpt_workspace directory. You can adjust the max_length and overlap parameters to fine-tune the way the documents are presented to the AI when it \"recall\" that memory: Adjusting the overlap value allows the AI to access more contextual information from each chunk when recalling information, but will result in more chunks being created and therefore increase memory backend usage and OpenAI API requests. Reducing the max_length value will create more chunks, which can save prompt tokens by allowing for more message history in the context, but will also increase the number of chunks. Increasing the max_length value will provide the AI with more contextual information from each chunk, reducing the number of chunks created and saving on OpenAI API requests. However, this may also use more prompt tokens and decrease the overall context available to the AI. Memory pre-seeding is a technique for improving AI accuracy by ingesting relevant data into its memory. Chunks of data are split and added to memory, allowing the AI to access them quickly and generate more accurate responses. It's useful for large datasets or when specific information needs to be accessed quickly. Examples include ingesting API or GitHub documentation before running Auto-GPT. Attention If you use Redis for memory, make sure to run Auto-GPT with WIPE_REDIS_ON_START=False For other memory backends, we currently forcefully wipe the memory when starting Auto-GPT. To ingest data with those memory backends, you can call the data_ingestion.py script anytime during an Auto-GPT run. Memories will be available to the AI immediately as they are ingested, even if ingested while Auto-GPT is running.","title":"\ud83e\udde0 Memory pre-seeding"},{"location":"configuration/search/","text":"\ud83d\udd0d Google API Keys Configuration Note This section is optional. Use the official Google API if search attempts return error 429. To use the google_official_search command, you need to set up your Google API key in your environment variables. Create your project: Go to the Google Cloud Console . If you don't already have an account, create one and log in Create a new project by clicking on the Select a Project dropdown at the top of the page and clicking New Project Give it a name and click Create Set up a custom search API and add to your .env file: Go to the APIs & Services Dashboard Click Enable APIs and Services Search for Custom Search API and click on it Click Enable Go to the Credentials page Click Create Credentials Choose API Key Copy the API key Set it as the GOOGLE_API_KEY in your .env file Enable the Custom Search API on your project. (Might need to wait few minutes to propagate.) Set up a custom search engine and add to your .env file: Go to the Custom Search Engine page Click Add Set up your search engine by following the prompts. You can choose to search the entire web or specific sites Once you've created your search engine, click on Control Panel Click Basics Copy the Search engine ID Set it as the CUSTOM_SEARCH_ENGINE_ID in your .env file Remember that your free daily custom search quota allows only up to 100 searches. To increase this limit, you need to assign a billing account to the project to profit from up to 10K daily searches.","title":"Search"},{"location":"configuration/search/#google-api-keys-configuration","text":"Note This section is optional. Use the official Google API if search attempts return error 429. To use the google_official_search command, you need to set up your Google API key in your environment variables. Create your project: Go to the Google Cloud Console . If you don't already have an account, create one and log in Create a new project by clicking on the Select a Project dropdown at the top of the page and clicking New Project Give it a name and click Create Set up a custom search API and add to your .env file: Go to the APIs & Services Dashboard Click Enable APIs and Services Search for Custom Search API and click on it Click Enable Go to the Credentials page Click Create Credentials Choose API Key Copy the API key Set it as the GOOGLE_API_KEY in your .env file Enable the Custom Search API on your project. (Might need to wait few minutes to propagate.) Set up a custom search engine and add to your .env file: Go to the Custom Search Engine page Click Add Set up your search engine by following the prompts. You can choose to search the entire web or specific sites Once you've created your search engine, click on Control Panel Click Basics Copy the Search engine ID Set it as the CUSTOM_SEARCH_ENGINE_ID in your .env file Remember that your free daily custom search quota allows only up to 100 searches. To increase this limit, you need to assign a billing account to the project to profit from up to 10K daily searches.","title":"\ud83d\udd0d Google API Keys Configuration"},{"location":"configuration/voice/","text":"Text to Speech Enter this command to use TTS (Text-to-Speech) for Auto-GPT python -m autogpt --speak Eleven Labs provides voice technologies such as voice design, speech synthesis, and premade voices that Auto-GPT can use for speech. Go to ElevenLabs and make an account if you don't already have one. Choose and setup the Starter plan. Click the top right icon and find Profile to locate your API Key. In the .env file set: ELEVENLABS_API_KEY ELEVENLABS_VOICE_1_ID (example: \"premade/Adam\" ) List of available voices Note You can use either the name or the voice ID to configure a voice Name Voice ID Rachel 21m00Tcm4TlvDq8ikWAM Domi AZnzlk1XvdvUeBnXmlld Bella EXAVITQu4vr4xnSDxMaL Antoni ErXwobaYiN019PkySvjV Elli MF3mGyEYCl7XYWbV9V6O Josh TxGEqnHWrfWFTfGW9XjX Arnold VR6AewLTigWG4xSOukaG Adam pNInz6obpgDQGcFmaJgB Sam yoZ06aMxZJJ28mfd3POQ","title":"Voice"},{"location":"configuration/voice/#text-to-speech","text":"Enter this command to use TTS (Text-to-Speech) for Auto-GPT python -m autogpt --speak Eleven Labs provides voice technologies such as voice design, speech synthesis, and premade voices that Auto-GPT can use for speech. Go to ElevenLabs and make an account if you don't already have one. Choose and setup the Starter plan. Click the top right icon and find Profile to locate your API Key. In the .env file set: ELEVENLABS_API_KEY ELEVENLABS_VOICE_1_ID (example: \"premade/Adam\" )","title":"Text to Speech"},{"location":"configuration/voice/#list-of-available-voices","text":"Note You can use either the name or the voice ID to configure a voice Name Voice ID Rachel 21m00Tcm4TlvDq8ikWAM Domi AZnzlk1XvdvUeBnXmlld Bella EXAVITQu4vr4xnSDxMaL Antoni ErXwobaYiN019PkySvjV Elli MF3mGyEYCl7XYWbV9V6O Josh TxGEqnHWrfWFTfGW9XjX Arnold VR6AewLTigWG4xSOukaG Adam pNInz6obpgDQGcFmaJgB Sam yoZ06aMxZJJ28mfd3POQ","title":"List of available voices"}]}